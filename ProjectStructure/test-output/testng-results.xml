<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" ignored="0" total="4" passed="2">
  <reporter-output>
  </reporter-output>
  <suite name="SuiteA" duration-ms="9002" started-at="2022-04-22T10:55:03 IST" finished-at="2022-04-22T10:55:12 IST">
    <groups>
    </groups>
    <test name="TestA" duration-ms="4858" started-at="2022-04-22T10:55:03 IST" finished-at="2022-04-22T10:55:08 IST">
      <class name="suiteA.TestA">
        <test-method status="PASS" signature="inti(org.testng.ITestResult)[pri:0, instance:suiteA.TestA@76f2b07d]" name="inti" is-config="true" duration-ms="319" started-at="2022-04-22T10:55:03 IST" finished-at="2022-04-22T10:55:03 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestA.testA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestA@76f2b07d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- inti -->
        <test-method status="FAIL" signature="testA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestA@76f2b07d]" name="testA" duration-ms="2022" started-at="2022-04-22T10:55:03 IST" data-provider="datasuiteA" finished-at="2022-04-22T10:55:05 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[U1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[P1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Titles do not match,
text do not match]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Titles do not match,
text do not match
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:47)
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:31)
at suiteA.TestA.testA(TestA.java:29)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA -->
        <test-method status="PASS" signature="quit()[pri:0, instance:suiteA.TestA@76f2b07d]" name="quit" is-config="true" duration-ms="417" started-at="2022-04-22T10:55:05 IST" finished-at="2022-04-22T10:55:06 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quit -->
        <test-method status="PASS" signature="inti(org.testng.ITestResult)[pri:0, instance:suiteA.TestA@76f2b07d]" name="inti" is-config="true" duration-ms="0" started-at="2022-04-22T10:55:06 IST" finished-at="2022-04-22T10:55:06 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestA.testA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestA@76f2b07d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- inti -->
        <test-method status="FAIL" signature="testA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestA@76f2b07d]" name="testA" duration-ms="2013" started-at="2022-04-22T10:55:06 IST" data-provider="datasuiteA" finished-at="2022-04-22T10:55:08 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[U2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[P2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Titles do not match,
text do not match]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Titles do not match,
text do not match
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:47)
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:31)
at suiteA.TestA.testA(TestA.java:29)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA -->
        <test-method status="PASS" signature="quit()[pri:0, instance:suiteA.TestA@76f2b07d]" name="quit" is-config="true" duration-ms="19" started-at="2022-04-22T10:55:08 IST" finished-at="2022-04-22T10:55:08 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quit -->
      </class> <!-- suiteA.TestA -->
    </test> <!-- TestA -->
    <test name="TestAA" duration-ms="4105" started-at="2022-04-22T10:55:08 IST" finished-at="2022-04-22T10:55:12 IST">
      <class name="suiteA.TestAA">
        <test-method status="PASS" signature="inti(org.testng.ITestResult)[pri:0, instance:suiteA.TestAA@371a67ec]" name="inti" is-config="true" duration-ms="1" started-at="2022-04-22T10:55:08 IST" finished-at="2022-04-22T10:55:08 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestAA.testAA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestAA@371a67ec] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- inti -->
        <test-method status="PASS" signature="testAA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestAA@371a67ec]" name="testAA" duration-ms="2016" started-at="2022-04-22T10:55:08 IST" data-provider="datasuiteA" finished-at="2022-04-22T10:55:10 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[U1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[P1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAA -->
        <test-method status="PASS" signature="quit()[pri:0, instance:suiteA.TestAA@371a67ec]" name="quit" is-config="true" duration-ms="16" started-at="2022-04-22T10:55:10 IST" finished-at="2022-04-22T10:55:10 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quit -->
        <test-method status="PASS" signature="inti(org.testng.ITestResult)[pri:0, instance:suiteA.TestAA@371a67ec]" name="inti" is-config="true" duration-ms="0" started-at="2022-04-22T10:55:10 IST" finished-at="2022-04-22T10:55:10 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestAA.testAA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestAA@371a67ec] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- inti -->
        <test-method status="PASS" signature="testAA(java.lang.String,java.lang.String)[pri:0, instance:suiteA.TestAA@371a67ec]" name="testAA" duration-ms="2013" started-at="2022-04-22T10:55:10 IST" data-provider="datasuiteA" finished-at="2022-04-22T10:55:12 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[U2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[P2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAA -->
        <test-method status="PASS" signature="quit()[pri:0, instance:suiteA.TestAA@371a67ec]" name="quit" is-config="true" duration-ms="53" started-at="2022-04-22T10:55:12 IST" finished-at="2022-04-22T10:55:12 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quit -->
      </class> <!-- suiteA.TestAA -->
    </test> <!-- TestAA -->
  </suite> <!-- SuiteA -->
</testng-results>
